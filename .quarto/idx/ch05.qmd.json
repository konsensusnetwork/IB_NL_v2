{"title":"Het grootboek beveiligen","markdown":{"headingText":"Het grootboek beveiligen","containsRefs":false,"markdown":"\nWe hebben besproken hoe we erin slagen om kopieën bij te houden van, en\nte schrijven naar een gedistribueerd grootboek dat zonder dwang of\ncorruptie werkt. We doen dit met behulp van een loterij en op basis van\nvalidatie door consensus.\n\nMaar wat gebeurt er wanneer een loterijwinnaar besluit om zich\nkwaadwillig op te stellen? Kan een miner historische boekingen in het\ngrootboek aanpassen? Kunnen onze kwaadwillige actoren Eva, Davy en Femke\nsamenspannen en de geschiedenis herschrijven of rekeningsaldi wijzigen\nen zichzelf meer munten toekennen?\n\nIn dit deel gaan we de *blockchain* bespreken. Eigenlijk is het louter\neen marketingterm die de technologiesector binnengedrongen is. In\nbitcoin worden blokken aan elkaar gehecht om een duidelijk link van de\nene transactie naar de volgende te behouden. Een ketting van blokken,\neen *blockchain*, dus. Hierdoor ontstaat een lineaire geschiedenis van\ncreatie en uitgaven sinds Satoshi's *genesis block* in 2009 tot op\nvandaag.\n\nIn het vorige deel hebben we een klein beetje gelogen om het eenvoudig\nte houden. Wanneer je meespeelt met de loterij (om te minen), is het\nniet enkel de wachtende transacties en een lukrake *nonce* die je hasht.\nJe voegt daar ook nog een hash van het blok net daarvoer toe. Op die\nmanier ontstaat een duidelijke link tussen jouw blok en het vorige.\n\nHerinner je dat de output van een hash-functie onvoorspelbaar is en\nafhankelijk is van alle inputdata die je gebruikt. De hashes van ons\nblok bevat nu drie verschillende inputs:\n\n1.  De transacties die we naar het grootboek willen schrijven\n\n2.  Een lukrake *nonce*\n\n3.  Een hash van de vorige blok die we gebruiken als basis voor de\n    geschiedenis van ons grootboek.\n\n![De drie inputs die zijn gebruikt om een hash voor de loterij te bouwen, bevatten nu ook de vorige winnende hash, waardoor een link ontstaat van het ene blok naar het andere.](images/fig11.png){#fig-figuur11}\n\n\nDit stelt ons in staat om een historisch overzicht van elk blok te\nbouwen tot en met het eerste blok, ontgonnen door Satoshi. Wanneer we\neen nieuw blok aan de ketting toevoegen, moeten we valideren dat het\ngeen transacties bevat die bitcoins uitgeven die in het verleden al een\ngespendeerd zijn.\n\nWanneer ook maar iets verandert in de inputs van de hash, zal de output\nvan de hash drastisch en onvoorspelbaar anders zijn. Als je probeert de\ndata uit een oud blok te manipuleren, zal je ook de resulterende hash\nveranderen. Aangezien die hash ook werd gebruikt in de input voor de\nblokken die daar net na kwamen, zal je ook de hashes van die blokken\nveranderen. De hash van de laatste blok in de ketting, die gelinkt is\nmet alle voorgaande, doet dienst als een vingerafdruk voor de volledige\ngeschiedenis van het grootboek tot op dat moment.\n\nHet is onmogelijk om vals te spelen bij proof-of-work omdat iederen weet\nhoeveel energie gebruikt moet worden per blok om het vereiste doelnummer\nte vinden. Mocht iemand willen proberen om een oudere blok in de ketting\naan te passen, zouden ze de proof-of-work hash moeten aanpassen van de\nblok waar ze mee knoeien én die van alle andere blokken die daarna\nkomen. De *blockchain* is niet alleen fraudebestendig, het is ook enorm\nduur om het te proberen.\n\nIedere nieuwe blok die gevonden wordt draagt effectief bij aan de\nveiligheid van alle blokken die ervoor kwamen omdat het de hoeveelheid\nelektriciteit die nodig is om de proof-of-work hashes voor de ketting\ntot op dat punt te herschrijven, verhoogt. Een transactie in een blok,\nbegraven onder 6 opeenvolgende blokken wordt aanzien als finaal door de\nmeeste handelaars. Het zou namelijk een aanzienlijke hoeveelheid energie\nkosten om de laatste 6 blokken opnieuw te hashen met de hash-rate van\nvandaag. Een transactie die 100 blokken diep zit? Vergeet het maar.\n\nWanneer je een kopie van de *blockchain* downloadt, is elke transactie\nin elke blok volledig transparant. Je kan de proof-of-work hashes zelf\ncontroleren om zeker te zijn dat niets aangepast werd door de persoon\ndie jouw het grootboek bezorgde.\n\n## Wanneer blokken botsen\n\nEr ontbreekt nog een element in het consensus-systeem: hoe zorgen we dat\niedereen met dezelfde lineaire geschiedenis van transacties werkt\nwanneer miners tegelijk twee blokken vinden en ze naar iedereen\nuitsturen?\n\nStel je voor dat we nu een wereldwijd netwerk draaien. Mensen van over\nheel de wereld, van de VS tot China, zijn allemaal aangesloten bij dit\nglobale netwerk en ze spelen allemaal mee met de proof-of-work mining\nloterij.\n\nIemand in Chicago vindt een geldig blok. Ze deelt het resultaat met het\nnetwerk en alle computers in de VS accepteren het. Tegelijk vindt iemand\nin Shanghai een paar seconden later ook een blok. De buren van die\nvinden hebben nog niets vernomen van het blok uit Chicago. Ze accepteren\nhet Chinese voorstel.\n\nBeide blokken bevatten een transactie van 1 bitcoin van Alice naar Bob.\nOnmiddellijk na ontvangst stuurt Bob het bedrag opnieuw door naar\nCharles. Wegens het verschil in timing reflecteert het blok uit de VS\ndeze situatie en Bob saldo van nul. Echter, de Chinese speler vond een\noplossing en publiceerde een blok voordat Bob's transactie naar Charles\nbekend was. Het blok uit China toont een saldo voor Bob van 1 bitcoin.\n\nHet netwerk is nu verdeeld. Het is onduidelijk welke versie van het\ngrootboek juist is, aangezien beide versie geldige transacties bevatten\ndie correct gelinkt zijn met alle voorgaande transacties. De twee versie\nbevatten een geldige hoeveelheid proof-of-work. Dit noemen we een *chain\nsplit* (splitsing van de ketting). Je kan geen centrale autoriteit\nraadplegen om uit te maken welke versie wint. Hoe pakken we dit aan?\n\nBitcoin biedt een eenvoudige oplossing: gewoon afwachten. Het staat de\nminers vrij om te kiezen welk blok ze willen kiezen als basis om verder\nop te werken. De Amerikanen zullen minen om verder te bouwen op het\neerste blok waar zij van hoorden en de Chinezen bouwen verder op hun\nversie.\n\nIn de volgende tien minuten wordt opnieuw een blok gevonden. De code van\nbitcoin stipuleert dat diegene die de meeste energie gebruikt heeft voor\nalle blokken in hun ketting wint. Deze cruciale spelregel vraagt ons om\nhet totale verrichte werk in een ketting te sommeren en de voorkeur te\ngeven aan de \"zwaarste\", cumulatieve proof-of-work ketting. Dit principe\nnoemen we Nakamoto Consensus, ter ere van Satoshi.\n\nStel dat een Chinese miner opnieuw een volgend blok wint. Hun ketting is\nnu één blok verder dan de Amerikaanse en bevat meer totale\nproof-of-work. Wanneer ze deze bevinding meedelen aan de rest van het\nnetwerk, realiseren de spelers in de VS zich dat de Chinese *nodes* een\nketting geproduceerd hebben waar harder aan gewerkt is. Ze zien hun\n\"foutje\" onmiddellijk in en herorganiseren zich. Dit betekent dat zij\nhun laatste blok alsnog verwerpen en de twee blokken uit China opnemen\nin hun grootboek.\n\n![Een kettingsplitsing is een natuurlijk proces dat optreedt wanneer miners tegelijkertijd een blok vinden tijd. De ketting die zwaarder wordt door totaal bewijs van werk is geldig, en de andere blok wordt wees.](images/fig12.png){#fig-figuur12}\n\nHet blok uit de VS wordt nu een zogenaamd wees-blok (*orphan block*).\nAangezien het alsnog werd verworpen, gaat de beloning voor de vinden\nverloren en de transacties uit dat blok worden niet in het grootboek\ngeregistreerd. De verworpen transacties zijn niet verloren. Sommige\nwerden misschien ook opgenomen in het blok uit China en de rest kan\nuiteindelijk in een toekomstig blok alsnog in het grootboek geschreven\nworden.\n\nAlle onbevestigde transacties worden door miners lokaal bijgehouden op\nhun computer in een *mempool*. Elke transactie uit een verworpen blok\nkomt terug in de mempool terecht. Ze worden vervolgens door iemand\nanders in een blok geplaatst, zolang er geen conflict is met de nieuwe\ngeschiedenis van het grootboek vastgelegd in het laatste blok.\n\nHoewel we in dit voorbeeld naar de *nodes* refereren als zijnde\nAmerikaans of Chinese, weten nodes in realiteit niets over elkaars\nidentiteit of geografische locatie. Het enige bewijs van validiteit dat\nze nodig hebben, is dat iemand de zwaarste, cumulatieve proof-of-work\nketting heeft en dat de transacties in die ketting zelf allemaal geldig\nzijn (geen dubbele-uitgaven).\n\nDit soort splitsingen van de ketting zijn vrij normaal en gebeuren af en\ntoe in bitcoin. Doorgaans wordt opnieuw consensus bereikt in het volgend\nblok. Verbeteringen in technologie van bekendmaking van blokken en\nverhoogde netwerk-connectiviteit maken dit probleem mettertijd minder\ngroot. Op vandaag, en hoogstwaarschijnlijk voor de nabije toekomst,\nheeft bitcoin een harde limiet op de hoeveelheid data dat toegelaten\nwordt in een blok. Een deel van de reden dat bitcoin, iedere tien\nminuten, relatief kleine blokken produceert, is om te verzekeren dat\n*orphans* erg zeldzaam zijn.\n\nMinen is een spel van kansen. Soms liggen blokken tien minuten uiteen,\nmaar andere keren slechts enkele seconden. Indien we om de paar seconden\nblokken zouden produceren, of indien we erg grootte blokken zouden\nhebben, zou de kans groter zijn dat Amerikaanse en Chinese blokken\nconflicteren. Ze liggen ver uiteen en het duurt langer om elkaar te\nbereiken. Als *orphans* te veel voorkomen, zou de ketting ontrafelen. We\nzouden *orphan na orphan* zien verschijnen en *nodes* zouden de tijd\nniet hebben om uit te maken welke nu het laatste, juiste blok is.\n\nHet is belangrijk om blokken klein te houden om de kans te vergroten dat\nhet hele netwerk de laatste blok kan ontvangen vooraleer te beginnen aan\neen volgende loterij. De andere, wellicht belangrijkste reden, is dat\nkleine blokken ook de vereisten qua hardware voor het draaien van een\n*node* relatief laag houden. Zo blijft het de moeite om aan te sluiten\nbij het netwerk en blijft mining meer verspreidt over tijd. Grote\nblokken zouden miners aanzetten om zich te vestigen in *datacenters* in\ngekende geografische locaties om splitsingen, die slecht zijn voor hun\nrendabiliteit, te vermijden\n\n## De enige, echte ketting\n\nLaten we terugkeren naar ons voorbeeld uit hoofdstuk 3 waarin Henri voor\nhet eerst aansluit bij het bitcoin netwerk.\n\nDe *node* van Henri zal een connectie maken met enkele andere *nodes* op\nhet netwerk. Vervolgens vraagt hij die om nog andere *nodes* die zij\nkennen en maakt ook daar verbinding mee. Dit heet *node discovery*.\n\nSommige van die *nodes* zullen slechte bedoelingen hebben en valse\nkopieën van het grootboek bezorgen. Ze kunnen bijvoorbeeld ongeldige\nhandtekeningen voor transacties bevatten, of vervalste en oneerlijk\nontgonnen bitcoin die geen geldige proof-of-work hashes hebben. Al die\nversies zullen onmiddellijk verworpen worden en de afzenders worden door\nde node van Henri verbannen.\n\nAndere *nodes* zullen wel eerlijk zijn, maar conflicterende versies van\nde waarheid hebben. Misschien ging een net offline en loopt hij nog\nenkele blokken achter. Wanneer hij verschillende kopieën van de\nblockchain download die allemaal geldig zijn, zal de software gebruik\nmaken van Nakamoto Consensus. Door te meten wat het totale, cumulative\nproof-of-work is, weet Henri onmiddellijk welke de zwaarste ketting is\ndie wordt aanzien als de enige echte.\n\n*Nodes* spreken voortdurend met elkaar om zeker te zijn dat ze het\nmeeste recente blok hebben. Aangezien alle nodes de regel van de\nzwaarste ketting volgen, is er consensus over wat de ware staat van het\ngrootboek is. Henri moet niet vertrouwen op een meerderheid van stemmen.\nDit systeem zou makkelijk te bedriegen vallen door een grote hoeveelheid\n*nodes* te draaien die kwaadaardig zijn.\n\nZelfs als Henri met verschillende verouderde of kwaadaardige nodes en\nslechts 1 correcte node connecteert, dan zou de bitcoin-software weten\nwelke de juiste versie is. Die versie bevat de grootste hoeveelheid\nproof-of-work en bevat geldige transacties helemaal tot aan de *genesis\nblock*. Het belang hiervan kan niet genoeg benadrukt worden. Henri moet\nniemand vertrouwen; de software op zijn computer zal alle validaties\nuitvoeren die nodig zijn om zeker te zijn dat de *blockchain* waar hij\nmee werkt de enige juiste is.\n\nHet is daarom uiterst moeilijk voor hackers om een *node* een valse\nkopie van de ketting te bezorgen. Om dat te doen zou je alle eerlijke\nconnecties moeten kunnen uitsluiten en het doelwit enkel laten\nverbinding maken met je eigen, kwaadaardige *nodes*.\n\n## Omkeerbaarheid van transacties\n\nDoorgaans ontstaan concurrerende versies van het grootboek per toeval en\nwordt snel uitgeklaard welke de juiste versie is. Maar iemand die het\nnetwerk wil aanvallen kan gebruik maken van Nakamoto Consensus door meer\ndan 50% van de totale *hash-rate* te beheren. Op die manier kunnen ze de\nzwaarste, cumulatieve proof-of-work ketting produceren. Die versie van\nhet grootboek zal transacties bevatten die de aanvaller kiest, zolang ze\ngenoeg energie willen verbruiken om de aanval door te zetten. Wanneer ze\ndeze ketting bekendmaken aan het netwerk, zouden andere *nodes* hem\naccepteren als zijnde de echte. Die heet een 51%-aanval, omdat je meer\ndan de helft van alle rekenkracht op het netwerk nodig hebt om de aanval\nsuccesvol uit te voeren.\n\nHet is belangrijk om te begrijpen dat er geen echte finaliteit van\ntransacties is in bitcoin, aangezien 51%-aanvallen of *orphan blocks*\naltijd tot de mogelijkheid behoren. Ontvangers van transacties wachten\ntypisch tot enkele blokken boven op hun transactie werd gemined. Wanneer\nde hoeveelheid energie die nodig zou zijn om de ketting te herschrijven\nhoog genoeg is, wordt het erg onwaarschijnlijk dat de transactie\nongedaan wordt gemaakt en beschouwen de deze transfer als finaal.\n\nBlokken die ontgonnen worden boven op een blok waar onze transactie in\nzit, noemen we doorgaans *confirmaties*. Dus wanneer iemand zegt dat een\nbitcointransactie 6 confirmaties heeft, wordt bedoeld dat er 6 blokken\ngepasseerd zijn sinds de transactie in het grootboek zit. Wanneer je als\nhandelaar een digitaal product verkoopt met geringe marginale kosten,\nkan het voldoende zijn met slechts 1 confirmatie of zelfs zonder\nconfirmaties. Je stuurt de download link zodra de transactie\naangekondigd werd op het netwerk. Wanneer je een huis verkoop, kan het\nmisschien meer aangewezen zijn om te wachten op 12 confirmaties. Dat\nkost gemiddeld zo'n twee uur aan mining. Hoe langer je wacht, hoe meer\nproof-of-work boven op het blok met jouw transactie komt. Het wordt veel\nduurder om de transactie om te keren. Vandaag accepteren de meeste\nmensen een transactie met 6 confirmaties.\n\nMoest de *hash-rate* van bitcoin in belangrijke mate dalen, wat betekent\ndat minder energie ieder blok beveiligd, dan kan je altijd het aantal\nconfirmaties verhogen vereist voor een \"finale afwikkeling\". Hoewel de\nniet-finaliteit van transacties op het eerste zicht verontrustend lijkt,\nis het belangrijk om in het achterhoofd te houden dat transacties met\nkredietkaarten tot wel 120 dagen later kunnen worden teruggedraaid.\n\nAan de andere kant, zijn bitcointransacties na een paar blokken zo goed\nals onomkeerbaar. Vanuit dit oogpunt, is de omkeerbaarheid en finaliteit\nvan bitcoin een ontzettende verbetering met de meeste traditionele\nbetalingsnetwerken, althans voor de handelaar.\n\nOp vandaag wordt geschat dat iemand met de energie van het volledige\nbitcoin netwerk ter beschikking -- een serieuze uitdaging, aangezien je\ntoegang tot de energie van een klein land én alle gespecialiseerde\nhardware moet hebben -- nog altijd meer dan een jaar zou nodig hebben om\nde volledige geschiedenis van de *chain* te herschrijven. Je kan deze\ndata bekijken op [ https://bitcoin.sipa.be/]( https://bitcoin.sipa.be/)\n\nFootnote: dit interessante artikel gaat dieper in op ongeldige blokken\nin bitcoin: [\nhttps://hackernoon.com/bitcoin-miners-beware-invalid-blocks-need-not-apply-51c293ee278b\n]( https://hackernoon.com/bitcoin-miners-beware-invalid-blocks-need-not-apply-51c293ee278b )\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"ch05.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"cosmo","fontsize":"1.1em","linestretch":1.7},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":true,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","toc":true,"number-sections":true,"output-file":"ch05.pdf"},"language":{},"metadata":{"block-headings":true,"documentclass":"scrbook","toc-title":"Inhoudsopgave","colorlinks":true,"fontfamily":"Alegreya","geometry":["top=30mm","left=20mm","heightrounded"]},"extensions":{"book":{}}},"epub":{"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","to":"epub","output-file":"ch05.epub"},"language":{},"metadata":{"cover-image":"cover.png"},"extensions":{"book":{}}}}}