{"title":"Proof-of-work","markdown":{"headingText":"Proof-of-work","containsRefs":false,"markdown":"\n\nHet loterij-systeem uit het vorige hoofdstuk, heeft twee grote\nproblemen:\n\n1.  Als we er van uitgaan dat dat we geen enkele centrale partij kunnen\n    vertrouwen, wie verkoopt dan de loten van de loterij en wie kiest de\n    winnende loten?\n\n2.  Hoe zorgen we ervoor dat de winnaar van de loterij de rest niet\n    bedriegt en alleen geldige transacties in het grootboek opneemt?\n\nAls we een systeem willen waar iedereen *zonder toestemming* lid van kan\nworden, dan moeten we de eis dat iets betrouwbaar moet zijn uit het\nsysteem halen; het systeem moet *trustless* zijn.[^8]\n\nWe moeten tijdens het bedenken van ons systeem rekening houden met de\nvolgende punten:\n\n1.  Bij gecentraliseerde loterijen zoals de Staatsloterij is één partij\n    verantwoordelijk voor het genereren van alle loten. In ons systeem\n    kunnen we centraal gezag niet vertrouwen, en moet iedereen dus zijn\n    eigen loten kunnen genereren.\n\n2.  We moeten voorkomen dat iemand de loterij volledig in handen krijgt\n    door een enorm aantal loten te genereren. De loten kunnen dus niet\n    gratis zijn. Hoe zorgen we ervoor dat je daadwerkelijk geld moet\n    uitgeven om kaartjes te kopen als er niemand is bij wie je ze kunt\n    kopen? De loten moeten van het universum gekocht worden: je moet\n    elektriciteit verbruiken om ze te genereren.\n\n3.  Het moet voor alle andere deelnemers gemakkelijk zijn om te\n    verifiëren dat je de loterij gewonnen hebt door alleen je lotnummer\n    te controleren. Bij de Staatsloterij bepaalt de trekkingsmachine van\n    de Nederlandse Loterij wat het winnende lot is. In een decentraal\n    systeem kan dat niet. In plaats daarvan laten we iedereen van\n    tevoren overeenstemmen over een getallenreeks. Valt je lotnummer\n    binnen het vooraf bepaalde bereik, dan win je. We gebruiken een\n    cryptografische truc om dit te doen met behulp van een\n    *hash-functie*.\n\n## Een energie-intensieve asymmetrische puzzel\n\nDe elegante oplossing voor alle drie deze problemen heet\n*proof-of-work*.[^9] Dit onderdeel van ons systeem werd al in 1993, lang\nvoor bitcoin, uitgevonden. Dit is waarschijnlijk het moeilijkst te\nbegrijpen onderdeel van onze loterij, dus we zullen hier in de komende\nhoofdstukken uitgebreid op ingaan.[^10]\n\nZoals we hierboven (in punt 2) concludeerden, moet het duur zijn om de\nloten te genereren. Anders kan iedereen zomaar een onbeperkt aantal\nloten in handen krijgen. Wat is gegarandeerd duur en is niet afkomstig\nvan een centrale autoriteit?\n\nDit is waar de natuurkundige kant van bitcoin de hoek om komt kijken: de\neerste wet van de thermodynamica stelt dat energie niet kan worden\ngecreëerd of vernietigd. Een *gratis lunch* bestaat niet als het op\nenergie aankomt. Elektriciteit is altijd duur omdat je het moet kopen\nvan de stroomproducenten, of je eigen energiecentrale moet bouwen. In\nbeide gevallen is het verkrijgen van elektriciteit kostbaar.\n\nHet concept achter proof-of-work is dat je deelneemt aan een willekeurig\nproces, vergelijkbaar met het rollen van een dobbelsteen. Maar in plaats\nvan de gekende zes zijden, heeft onze dobbelsteen ongeveer evenveel\nzijden als atomen in het universum. Om deze dobbelsteen te rollen, en\ndus lotnummers te genereren, moet je computer berekeningen uitvoeren die\nelektriciteit kosten.\n\nOm de loterij te winnen, moet je een getal vinden dat wiskundig is\nafgeleid van de transacties die je in het grootboek wilt schrijven, plus\nhet getal dat je op de dobbelsteen hebt gerold. Om dit winnende getal te\nvinden, moet je misschien wel miljarden, triljoenen of quadriljoenen\nkeren met de dobbelsteen rollen, waarbij je duizenden dollars aan\nenergie verbruikt. Omdat dit proces op basis van willekeur geschied, is\nhet voor iedereen mogelijk om zijn eigen loten te genereren, zonder\ncentrale autoriteit. Hiervoor heb je slechts de lijst met transacties\nnodig die je naar het grootboek wilt schrijven en een computer die een\nwillekeurig getal genereert.\n\nOok al heeft het vinden van een winnend getal misschien duizenden\ndollars aan verbrande energie gekost, toch hoeven andere mensen op het\nnetwerk slechts een paar simpele checks uit te voeren om jouw werk te\ncontroleren:\n\n1.  Is het getal dat je hebt opgegeven minder dan het bereik dat van\n    tevoren is afgestemd?\n\n2.  Is het getal inderdaad wiskundig afgeleid van een geldige\n    verzameling van transacties die je naar het grootboek wilt\n    schrijven?\n\n3.  Voldoen de transacties die gepresenteerd worden aan de regels van\n    bitcoin (zijn er geen dubbele uitgaven, worden er geen nieuwe\n    bitcoin gegenereerd buiten het toegestane schema, etc.)?\n\nHet proces van proof-of-work berust op toeval en vereist vele\ncomputerhandelingen om een winnend lot te vinden. Het heeft echter maar\néén handeling nodig om het te verifiëren. Je kunt het zien als een\nkruiswoordpuzzel of een sudoku. Het kost je misschien uren om op te\nlossen, maar als je de opgeloste puzzel aan iemand die de regels kent\ngeeft, kan hij in een oogopslag zien of jouw oplossing correct is. Dit\nmaakt het systeem *asymmetrisch*: het is moeilijk voor de mensen die\nmeespelen, maar heel makkelijk voor de mensen die de uitkomst\ncontroleren.\n\nOmdat je een aanzienlijke hoeveelheid energie (en dus geld) verbrandt\nbij het spelen van deze loterij, wil je dat iedereen jouw winnende lot\naccepteert zodat jij de prijs krijgt. Je wordt dus gestimuleerd om\nalleen transacties die voldoen aan de regels toe te voegen aan het\ngrootboek.\n\nAls je bijvoorbeeld geld probeert uit te geven dat al eerder is\nuitgegeven, dan wordt je winnende lot door iedereen afgewezen en is alle\nenergie die je hebt verbrand om je lot te kopen voor niets geweest. Aan\nde andere kant, wie zich aan de regels houdt en alleen geldige\ntransacties aan het grootboek toevoegt, wordt beloond met bitcoin om de\nenergierekening te betalen en hopelijk ook nog een beetje winst over te\nhouden.\n\nHet proof-of-work systeem heeft de belangrijke eigenschap dat het kosten\nheeft die in de echte wereld verankerd zijn. Als je het netwerk aan zou\nwillen vallen door sommige deelnemers te bedreigen, zou je niet alleen\nhun computers moeten hacken of overnemen, maar ook hun\nelektriciteitsrekening moeten betalen.\n\nMaar hoe kunnen deelnemers bewijzen dat ze deze energie daadwerkelijk\nhebben verbrand? Hiervoor hebben we een spoedcursus\ncomputerwetenschappen nodig over twee belangrijke concepten: *hashing*\nen *bits*.\n\n## Hashing\n\nDe asymmetrische proof-of-work-puzzel van bitcoin omvat het gebruik van\neen *hash-functie*.[^11] Een functie is een wiskundige bewerking waarin\nje een invoer (x) hebt en je hiervoor een *uitvoerwaarde* $f(x)$ krijgt.\nDe functie $f(x)=2x$ neemt bijvoorbeeld de waarde x en vermenigvuldigt\ndeze met twee. Dus de invoer $x=2$ geeft ons de uitvoerwaarde $f(x)=4$.\n\nEen hash-functie is een speciale functie. Een invoer van deze functie\nkan iedere willekeurige reeks gegevens zijn, en de uitvoer is een getal\ndat er willekeurig uitziet:\n\n        66ef3d9a8035fa324e813fdc368ac175\n        2e329a1cb663cd1559c747d549983bf8\n\nBovenstaande uitvoer is het resultaat van een specifieke hash-functie\nmet de invoer Hallo Wereld. De specifieke hash-functie die hiervoor\ngebruikt werd, is sha256. Niet geheel toevallig dezelfde hash-functie\ndie bitcoin ook gebruikt.[^12]\n\n![Data gaat er aan de ene kant in, en aan de andere kant komt er een gigantisch onvoorspelbaar getal uit.](images/fig4.png){#fig-fig4)}\n\nDe sha256 hash-functie heeft de volgende eigenschappen die nuttig zijn\nvoor ons:\n\n1.  De output is deterministisch. Dat wil zeggen dat je bij dezelfde\n    invoer altijd dezelfde uitvoer krijgt.\n\n2.  De uitvoer is onvoorspelbaar. Indien slechts één letter van de\n    invoer veranderd wordt, dan is de output *volledig* anders, zonder\n    enige correlatie met de oude invoer.\n\n3.  De uitvoer-hash is snel te berekenen, onafhankelijk van de grootte\n    van de invoer.\n\n4.  Het is praktisch onmogelijk twee verschillende invoerwaardes te\n    vinden die dezelfde uitvoer hebben.\n\n5.  De sha256 functie is een éénrichtingsfunctie. Het is onmogelijk om\n    de invoer te herleiden uit de uitvoer.\n\n6.  De uitvoer is altijd een specifieke grootte (256 *bits* voor\n    sha256).\n\n## Een korte uitleg over bits\n\nHet getallensysteem waar je bekend mee bent, bestaande uit de getallen 0\ntot en met 9 wordt *decimaal* genoemd omdat het tien cijfers heeft.\nComputers geven de voorkeur aan een ander getallenstelsel: een systeem\ngemaakt van enen en nullen, die respectievelijk de aan- of afwezigheid\nvan een elektrisch signaal aangeven. Dit getallensysteem wordt *binair*\ngenoemd.\n\nIn het decimale stelsel gebruik je slechts de cijfers $0$ tot en met\n$9$. Als je slechts één cijfer gebruikt, kun je tien verschillende\ngetallen vertegenwoordigen, 0 tot en met 9. Als je twee cijfers\ngebruikt, kun je $10 \\times 10 = 100$ verschillende getallen\nvoorstellen: $00, 01,...$ tot en met $99$. Voor drie cijfers kun je\n$10 \\times 10 \\times 10 = 1000$ getallen hebben: $000, 001,...$ tot en\nmet $999$.\n\nHopelijk begin je hier een patroon in te zien. Om erachter te komen hoe\ngroot het getal is dat we kunnen voorstellen met N cijfers,\nvermenigvuldigen we tien, $N$ keer met zichzelf, oftewel $10^N$ ($10$\ntot de macht van $N$).\n\nHet binaire stelsel werkt op dezelfde manier. Het enige dat verandert is\nhet aantal cijfers die beschikbaar zijn. Terwijl we gewend zijn aan het\ndecimaal stelsel met tien cijfers, kan een *binair cijfer* of *bit*\nslechts twee waarden hebben: nul en één.\n\nAls een *bit* 2 waarden kan vertegenwoordigen, dan kunnen twee *bits* 4\nwaarden vertegenwoordigen: $00, 01, 10, 11$. Je kunt dit berekenen door\n$2 \\times 2$ te vermenigvuldigen, aangezien elk cijfer twee waarden kan\nhebben. Drie bits kunnen $2 \\times 2 \\times 2 = 2^3 = 8$ waarden\nvertegenwoordigen: $000, 001, 010, 011, 100, 101, 110, 111$.\n\nEen *binair* getal dat N *bits* lang is, kan dus $2^N$ verschillende\nwaarden vertegenwoordigen.\n\nDaarom is het aantal unieke waarden die je kunt vertegenwoordigen met\n256 bits, de grootte van de sha256 hashing functie, $2^{256}$. Dat is\neen gigantisch, bijna onvoorstelbaar groot aantal. Weergegeven in\ndecimaal, is getal dit 78 cijfers lang. Ter vergelijking is dit ongeveer\ndezelfde ordegrootte als het geschatte aantal atomen in het bekende\nuniversum.\n\n$2^{256}$ = 115 792 089 237 316 195 423 570 985 008 687 907 853 269 984\n665 640 564 039 457 584 007 913 129 639 936\n\nBovenstaande getal is het aantal mogelijke resultaten van een sha256\nhash-functie. Het is dus zo goed als onmogelijk om te voorspellen wat\nhet getal zal zijn dat door deze functie wordt geproduceerd. Het zou\nhetzelfde zijn als het perfect voorspellen van de uitkomst van 256\nachtereenvolgende muntworpen, of het raden van de locatie van één\nwillekeurig uitgekozen atoom, ergens in het universum.\n\nDit getal is uiteraard te lang om te blijven uitschrijven, dus we houden\nhet vanaf nu gewoon op $2^{256}$, maar ik hoop dat dit het ongelofelijke\naantal mogelijkheden duidelijk heeft gemaakt.\n\n## Laten we een aantal teksten hashen\n\nHier zijn enkele voorbeeldteksten en hun sha256 hashes. De uitvoer wordt\nweergegeven in decimale notatie, maar binnenin een computer zou dit de\nbekende reeks van enen en nullen zijn.\n\nHet punt is om te tonen hoe drastisch de uitvoer verandert op basis van\néén kleine wijziging in de invoer, en om te laten zien dat je niet kunt\nvoorspellen welke uitvoer geproduceerd wordt door de hash-functie op\nbasis van wat je erin stopt:\n\n        “Hello World!”\n        869913660443924676617831651669733090238\n        07181648024718778313526389892860994842\n       \n        “Hello World!!”\n        849402277206958989554476271088404243643\n        90283616735576803008868844073193772558\n\nOp geen enkele manier kan iemand op basis van deze getallen zien of\nberekenen wat de invoer is geweest, zelfs geen computer. Als je zelf met\nsha256 wilt spelen, kun je het uitproberen op [https://passwordsgenerator.net/sha256-hash-generator](https://passwordsgenerator.net/sha256-hash-generator).\n\n## Hashen om de proof-of-work loterij te winnen\n\nNu zijn we klaar om te praten over het belangrijkste stukje magie. We\nzeiden dat er $2^{256}$ totale mogelijke sha256-uitvoerwaarden zijn.\nLaten we in dit voorbeeld voor het gemak even doen alsof er slechts 1000\nverschillende uitkomsten zijn.\n\nHet loterijsysteem werkt als volgt:\n\n1.  Alice kondigt aan dat ze 2 dollar naar Bob wil sturen.\n\n2.  Iedereen die meespeelt, neemt de transactie Alice geeft \\$2 aan Bob,\n    en voegt hier een willekeurig getal aan toe, wat we een *nonce*\n    noemen.[^13] Hierdoor zal de input van hun sha256 hash-functie\n    anders zijn dan de input van die van anderen, wat helpt om een\n    winnend getal te vinden.\n\n3.  Als dat getal kleiner is dan het *doelnummer* (dit bespreken we\n    verder in het volgende hoofdstuk), winnen ze de loterij.\n\n4.  Als het getal dat ze krijgen groter is dan het doelnummer, dan\n    hashen ze opnieuw, maar voegen dit keer een andere nonce toe: *Alice\n    geeft \\$2 aan Bob nonce=12345*, dan *Alice geeft \\$2 aan Bob\n    nonce=92435*, dan *Alice geeft \\$2 aan Bob\n    nonce=132849012348092134*, enzovoort. Ze doen dit net zolang tot\n    iemand een hash heeft gevonden die kleiner is dan het doelnummer.\n\nHet kan vele, vele pogingen kosten om een hash te vinden die kleiner is\ndan het doelnummer. We kunnen in feite bepalen hoe vaak iemand de\nloterij kan winnen door de kans dat ze een winnend getal vinden te\nmanipuleren. Als er 1000 mogelijke hashes zijn, en we stellen het\ndoelnummer in op 100, welk percentage van hashes zit er dan onder de\ndoelnummer?\n\nDat is natuurlijk vrij basale wiskunde; 100 van de 1000 mogelijkheden,\nof 100/1000 = 10% van de hashes zullen minder zijn dan het doelnummer.\nDus als je een stuk tekst hasht en je hash-functie heeft 1000\nverschillende uitkomsten, verwacht je dat 10% van de hashes onder het\ndoelnummer van 100 uitkomt.\n\nEn dit is dus precies hoe onze loterij werkt: we spreken een doelnummer\naf, dan nemen we alle transacties die mensen toe willen voegen aan het\ngrootboek, en hashen ze met een willekeurig getal erbij (de *nonce*).\nZodra iemand een hash vindt die onder het doelnummer valt, deelt hij dit\nmee aan het hele netwerk:\n\nHoi iedereen!\n\n-   Ik heb de transacties Alice stuurt \\$2 naar Bob en Charlotte stuurt\n    \\$5 naar Alice genomen.\n\n-   Ik heb hier de nonce 32895 aan toegevoegd.\n\n-   De hash hiervan kwam uit op 42, wat minder is dan het afgesproken\n    doelnummer van 100.\n\n-   Hier is mijn proof-of-work: de transactiegegevens, de nonce die ik\n    heb gebruikt, en de hash die werd geproduceerd op basis van die\n    inputs.\n\nHet heeft mij misschien miljarden hash-pogingen en duizenden dollars aan\nenergie gekost om deze hash te vinden, maar iedereen kan onmiddellijk\nvalideren dat ik dit werk daadwerkelijk heb gedaan; omdat ik zowel de\ninvoergegevens (transacties en nonce) als de verwachte uitvoer (het\nhash-nummer) aan iedereen heb laten zien, kunnen ze dezelfde hash\nuitvoeren om in één poging te valideren of ik ze de juiste gegevens heb\ngegeven.\n\nHoe verhoudt dit zich tot het verbruiken van energie? We zeiden al\neerder dat de set van alle mogelijke hashes eigenlijk een gigantisch\ngetal is, dat ongeveer net zo groot is als het aantal atomen in het\nuniversum. We kunnen het doel instellen op een laag genoeg getal zodat\nslechts een heel klein deel van de hashes geldig is. Dit betekent dat\niedereen die een geldige hash wil vinden, een enorme hoeveelheid\nrekentijd, en dus elektriciteit, zal moeten verbruiken om een hash te\nvinden die kleiner is dan ons doelnummer.\n\nHoe lager het doelnummer, hoe meer pogingen het kost om een geldig getal\nte vinden, en hoe hoger het doelnummer, hoe sneller we een winnende hash\nkunnen vinden. Als onze kans om het juiste getal te vinden één op een\nmiljoen is, dan bewijzen we door dit getal te vinden dat we ongeveer een\nmiljoen berekeningen hebben uitgevoerd.\n\n![We kunnen hashing zien als het rollen van een\ngigantische dobbelsteen op basis van specifieke invoergegevens, met een\naantal zijden gelijk aan het aantal atomen in het universum. Alleen die\ninvoergegevens die ervoor zorgen dat je onder het doelnummer rolt,\nwinnen de loterij. Om de loterij te winnen, moet je aan de rest van het\nnetwerk laten zien welke gegevens je hebt gebruikt om tot de uitkomst te\nkomen.](images/fig5.png){#fig-fig5}\n\n[^8]: Nvdr. vrij vertaald: *zonder vertrouwen*. *Trustless* houdt in dit\n    geval in dat de gebruiker het systeem niet hoeft te vertrouwen, maar\n    alles zelf objectief kan verifiëren.\n\n[^9]: Proof-of-work betekent letterlijk *bewijs van uitgevoerd\n    werk/gedane arbeid*.\n\n[^10]: [https://en.wikipedia.org/wiki/Proof-of-work_system](https://en.wikipedia.org/wiki/Proof-of-work_system)\n\n[^11]: [https://en.wikipedia.org/wiki/Hash_function](https://en.wikipedia.org/wiki/Hash_function)\n\n[^12]: [https://en.wikipedia.org/wiki/SHA-2](https://en.wikipedia.org/wiki/SHA-2)\n\n[^13]: Staat voor number used only once\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["social-share"],"toc":true,"output-file":"ch03.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","share":{"permalink":"https://bitcoinboeken.com/","description":"Leer over bitcoin met de bekendste boeken over bitcoin in het Nederlands.","twitter":true,"facebook":true,"reddit":true,"linkedin":true,"email":true},"theme":"cosmo","toc-title":"Inhoudsopgave","toc-location":"right","fontsize":"1.1em","linestretch":1.7,"number-depth":0,"cap-location":"top"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":true,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","filters":["social-share"],"toc":true,"number-sections":true,"output-file":"ch03.pdf"},"language":{},"metadata":{"block-headings":true,"share":{"permalink":"https://bitcoinboeken.com/","description":"Leer over bitcoin met de bekendste boeken over bitcoin in het Nederlands.","twitter":true,"facebook":true,"reddit":true,"linkedin":true,"email":true},"documentclass":"scrbook","toc-title":"Inhoudsopgave","number-depth":0,"colorlinks":true,"fontfamily":"Alegreya","geometry":["top=30mm","left=20mm","heightrounded"]},"extensions":{"book":{}}},"epub":{"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","to":"epub","filters":["social-share"],"output-file":"ch03.epub"},"language":{},"metadata":{"share":{"permalink":"https://bitcoinboeken.com/","description":"Leer over bitcoin met de bekendste boeken over bitcoin in het Nederlands.","twitter":true,"facebook":true,"reddit":true,"linkedin":true,"email":true},"cover-image":"cover.png"},"extensions":{"book":{}}}}}